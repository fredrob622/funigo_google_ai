/****************** /frontend/index.html *************************************************************/

Contient 

    <div id="header-placeholder"></div>
    <div id="contenu-placeholder"></div>
    <div id="footer-placeholder"></div>

 function includeHTML(elementId, filePath) => qui charge un fichier et un répertoire
 
 On charge // Charger le header
        includeHTML('header-placeholder', 'html/index_header_menu.html') 
		
/****************** /frontend/html/index_header_menu.html *************************************************************/

Le fichier appelle https://www.funigo.fr/kanji 

<li>
	<div class="has-sous-menu">
		<a href="#" target="_self" >
			<img src="./icones/kanji1.png" alt="kanji"> <span class="nav-span">Kanji 字</span>
		</a>
	</div>
	<ul class="sous-sous-menu" aria-label="Langue">
		<li><a href="/kanji">Dico kanji</a></li>

	</ul>
</li>


/*************** httpd-vhosts.conf *********************************************************/
Dans le fichier httpd-vhosts.conf

   # Ajoute ceci si tu veux que funigo.fr/kanji soit aussi proxyfié par Apache
    ProxyPass /kanji http://localhost:5000/kanji
    ProxyPassReverse /kanji http://localhost:5000/kanji

/************ backend/server.js *******************************************************************/
Dans le fichier server.js lors de l'appelle /kanji le fichier IHM/index_kanji.ejs

// Configuration du moteur de vues EJS (important de le faire ici)
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'IHM')); // Définit le dossier où Express trouvera tes fichiers EJS
 
// Route pour servir la page principale des Kanji (l'ancien index_kanji.html)
app.get('/kanji', (req, res) => {
    // Cela va rendre IHM/index_kanji.ejs
    res.render('index_kanji');
});

/************ backend/IHM/index_kanji.ejs *******************************************************/

index_kanji.ejs charge la route <%- include('rechercheKanji.ejs') %>

	<!-- Inclusion du header -->
	<%- include('index_header_menu.ejs') %>
	
	<!-- Inclusion du contenu principal -->
    <%- include('rechercheKanji.ejs') %>
	
	<!-- Inclusion du footer -->
    <%- include('footer_menu.ejs') %>
	

/***************** backend/IHM/rechercheKanji.ejs *******************************************************/

Apès avoir chargé et rempli le formulaire lorsque soumet le formulaire il appelle la route rechercheKanji
avec la méthode post 

<h1>Recherche Kanji</h1>

			<form action="/api/rechercheKanji" method="post">
			
/****************** IHM/index_menu.ejs ******************************************************************/
Dans le fichier index_menu.ejs 

	<li>
		<div class="has-sous-menu">
			<a href="#" target="_self" >
				<img src="./icones/kanji1.png" alt="kanji"> <span class="nav-span">Kanji 字</span>
			</a>
		</div>
		<ul class="sous-sous-menu" aria-label="Langue">
			<li><a href="/kanji">Dico kanji</a></li>
		</ul>
	</li>
	
/****************** routes/rechercheKanji.js ******************************************************************/


/ Route POST pour l'API de recherche de Kanji
// Cette route traite les requêtes de recherche avec des critères envoyés dans le corps de la requête.
router.post('/rechercheKanji', (req, res) => {
    console.log("[KANJI_ROUTE] Route POST /rechercheKanji atteinte.");
    console.log("[KANJI_ROUTE] Corps de la requête dans la route POST :", req.body);
    // Récupération des paramètres de recherche depuis le corps de la requête
    let kanjiindex = req.body.kanjiindex;
    let niveau = req.body.Niveau;
    let kanji = req.body.kanji;
    let onyomi = req.body.onyomi;
    let kunyomi = req.body.kunyomi;
    let traduction = req.body.traduction;

    // Construction de la requête SQL dynamique
    let reqSql = "SELECT * FROM kanji_char WHERE 1=1"; // 'WHERE 1=1' simplifie l'ajout de conditions 'AND'

    if (kanjiindex !== "") {
        reqSql += ` AND kanji_index = ${db.escape(kanjiindex)}`; // Utilisation de db.escape pour la sécurité SQL
    }
    if (niveau !== "") {
        reqSql += ` AND niveau = ${db.escape(niveau)}`;
    } else {
        reqSql += ` AND niveau LIKE '%'`; // Si aucun niveau n'est spécifié, inclure tous les niveaux
    }
    if (kanji !== "") {
        reqSql += ` AND kanji LIKE ${db.escape('%' + kanji + '%')}`;
    }
    if (onyomi !== "") {
        reqSql += ` AND onyomi LIKE ${db.escape('%' + onyomi + '%')}`;
    }
    if (kunyomi !== "") {
        reqSql += ` AND kunyomi LIKE ${db.escape('%' + kunyomi + '%')}`;
    }
    if (traduction !== "") {
        reqSql += ` AND francais LIKE ${db.escape('%' + traduction + '%')}`;
    }

    console.log("[KANJI_ROUTE] Requête SQL générée :", reqSql);

    db.query(reqSql, (err, result) => {
        if (err) {
            console.error("[KANJI_ROUTE] Erreur lors de la recherche POST de kanji :", err);
            res.status(500).json({ error: "Erreur lors de la recherche de kanji." });
        } else {
            console.log("[KANJI_ROUTE] Résultats de la requête SQL (nombre d'enregistrements) :", result.length);
            console.log("[KANJI_ROUTE] Premiers résultats (si existent) :", result.slice(0, 5));
            res.status(200).render('affichageRechercheKanji', { result });
        }
    });
});



/************ en résumé ***************************************************************************/

Votre application Funigo suit un modèle d'architecture qui combine le rendu côté client pour la page d'accueil 
et le rendu côté serveur (avec EJS) pour les pages de fonctionnalités comme la recherche de Kanji.

Voici le flux étape par étape pour la recherche de Kanji :

/**** Page d'accueil (frontend/index.html) :

Cette page est initialement chargée par le navigateur.

Elle utilise du JavaScript côté client (includeHTML et des scripts de chargement dynamique) pour injecter 
le contenu d'autres fichiers HTML statiques, notamment le menu d'en-tête (html/index_header_menu.html), 
dans des placeholders.

/**** Navigation vers la recherche de Kanji :

Dans le menu d'en-tête (issu de html/index_header_menu.html), un lien (<li><a href="/kanji">Dico kanji</a></li>) 
pointe vers l'URL /kanji.

Lorsque ce lien est cliqué, le navigateur initie une requête GET vers /kanji.

Routage via Apache (Proxy Pass) :

Votre configuration Apache intercepte la requête /kanji.

Grâce à un ProxyPass, Apache redirige cette requête vers votre serveur Node.js, à l'URL http://localhost:5000/kanji.

/****** Traitement par le serveur Node.js (server.js) :

Le fichier server.js d'Express contient une route GET : app.get('/kanji', (req, res) => { res.render('index_kanji'); });.

Cette route est déclenchée par la requête. Elle demande à Express de rendre le template EJS index_kanji.ejs.

Express est configuré pour trouver les fichiers EJS dans un dossier de vues (par exemple, backend/IHM comme indiqué 
par vos include).

Rendu de la page du formulaire Kanji (index_kanji.ejs) :

/****** index_kanji.ejs est un template EJS. Il est traité et transformé en HTML sur le serveur.

Il utilise la directive EJS <%- include('rechercheKanji.ejs') %> pour insérer le contenu du formulaire de recherche 
(backend/IHM/rechercheKanji.ejs) directement dans le HTML final envoyé au navigateur.

Soumission du formulaire de recherche (rechercheKanji.ejs) :

Une fois le formulaire affiché dans le navigateur, l'utilisateur saisit des critères et le soumet 
(<form action="/api/rechercheKanji" method="post">).

Cette action envoie une requête POST à l'URL /api/rechercheKanji.

/***** Traitement de la recherche API par Node.js (server.js et routes/rechercheKanji.js) :

Dans server.js, la ligne app.use('/api', rechercheKanjiRouter); "monte" le routeur rechercheKanjiRouter 
(défini dans routes/rechercheKanji.js) sous le chemin /api.

Ainsi, la requête POST /api/rechercheKanji est prise en charge par la route outer.post('/rechercheKanji', ...) 
dans routes/rechercheKanji.js.

Ce gestionnaire de route exécute la logique de recherche dans votre base de données.

Le résultat de la recherche (result) est ensuite envoyé au navigateur en rendant un autre template EJS : res.status(200).render('affichageRechercheKanji', { result });.

/**** Affichage des résultats (affichageRechercheKanji.ejs) :

Le serveur rend affichageRechercheKanji.ejs en lui passant les données result.

Ce template EJS affiche les résultats dans un tableau et inclut également le header (index_header_menu.ejs) et 
le footer (footer_menu.ejs) via des directives include similaires. Le HTML final est envoyé au navigateur.

Votre Raisonnement est-il juste ?
Oui, votre raisonnement est tout à fait juste pour la description du flux de recherche de Kanji ! Vous avez 
parfaitement identifié comment les différentes parties (HTML statique, Express, EJS, routage, API, fichiers statiques) 
interagissent.

À quoi sert la ligne router.get('/recherche-kanji-formulaire', ...) ?
La ligne router.get('/recherche-kanji-formulaire', (req, res) =>
 { res.render(path.join(__dirname, "./../IHM/rechercheKanji.ejs")); }); dans routes/rechercheKanji.js 
 a un but spécifique :

C'est une route GET dédiée à l'affichage direct du formulaire de recherche de Kanji.

Utilité : Elle permet à un utilisateur (ou à une autre partie de votre application) d'accéder au formulaire 
de recherche sans passer par la route /kanji principale. Par exemple :

Si vous aviez un bouton "Accéder directement au formulaire Kanji" quelque part sur une autre page.

Pour le débogage ou les tests, cela vous permet de charger le formulaire seul en allant directement 
sur http://localhost:5000/api/recherche-kanji-formulaire (car elle est montée sous /api).

Relation avec /kanji : La route app.get('/kanji', ...) qui rend index_kanji.ejs (qui lui-même inclut rechercheKanji.ejs)
 est la voie "normale" pour l'utilisateur. La route /api/recherche-kanji-formulaire est une route alternative et 
 plus directe pour le formulaire seul.

Devez-vous vous occuper de la route /rechercheVocab.ejs ?
Oui, absolument ! Si votre objectif est d'ajouter une fonctionnalité de recherche de vocabulaire similaire à 
celle des kanjis, alors vous occuper de la route et du fichier rechercheVocab.ejs 
(ainsi que affichageRechercheVocab.ejs, et le routeur associé routes/rechercheVocab.js) est la prochaine étape logique.